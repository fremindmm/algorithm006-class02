package week07.pratice;

/**
 * 位1的个数
 *
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 *
 *  
 *
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 *
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 *
 *  示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 */
public class LeetCode_191_564 {

    public static void main(String[] args) {
        LeetCode_191_564 leetCode = new LeetCode_191_564();
        System.out.println(leetCode.hammingWeight(00000000000000000000000000001011));
    }

    /**
     * 位运算
     * 时间复杂度：O(1)
     * 空间复杂度: O(1)
     *
     * @param n
     * @return
     */
    public int hammingWeight(int n) {
        // 循环n，用n & (n - 1) 除去最后一位为 1 的数据
        int count = 0;
        while (n != 0) {
            count++;
            n = n & (n - 1);
        }

        return count;
    }
}
