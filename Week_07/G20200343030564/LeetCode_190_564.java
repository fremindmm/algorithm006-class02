package week07.pratice;

/**
 * 颠倒二进制位
 *
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * 示例 1：
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 *
 * 示例 2：
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *
 */
public class LeetCode_190_564 {

    public static void main(String[] args) {
        LeetCode_190_564 leetCode = new LeetCode_190_564();
        System.out.println(leetCode.reverseBits(1101));
    }

    /**
     * 位运算 （只能记住）
     * 时间复杂度：O(1)
     * 空间复杂度：O(1)
     *
     * @param n
     * @return
     */
    public int reverseBits(int n) {
        // 1.取n的后第x位
        // 2.把n的第31-i位颠倒
        // 3.对结果取或
        int ret = 0;
        for (int i = 0; i < 32; i++) {
            // ret * 2 + n % 2;
            ret = (ret << 1) | (n & 1);
            // n /= 2;
            n >>= 1;
            // 当负数的时候只能用位运算方式得到正确值
        }
        System.out.println(Integer.toBinaryString(ret));
        return ret;
    }

}
